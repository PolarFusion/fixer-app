"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
–°–æ–∑–¥–∞–µ—Ç 3 –∞–¥–º–∏–Ω–∞, 5 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π, 10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ 20 –∑–∞—è–≤–æ–∫.
"""

import asyncio
from datetime import datetime, timedelta
import random

from database import init_db, async_session_maker
from models import User, Ticket, UserRole, TicketStatus
from routers.auth import get_password_hash


# ===== –¢–ï–°–¢–û–í–´–ï –î–ê–ù–ù–´–ï =====

ADMIN_DATA = [
    {
        "email": "admin1@company.com",
        "full_name": "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "password": "admin123",
        "role": UserRole.ADMIN
    },
    {
        "email": "admin2@company.com", 
        "full_name": "–°–∏—Å—Ç–µ–º–Ω—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        "password": "admin123",
        "role": UserRole.ADMIN
    },
    {
        "email": "admin3@company.com",
        "full_name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
        "password": "admin123",
        "role": UserRole.ADMIN
    }
]

EXECUTOR_DATA = [
    {
        "email": "executor1@company.com",
        "full_name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
        "password": "exec123",
        "role": UserRole.EXECUTOR
    },
    {
        "email": "executor2@company.com",
        "full_name": "–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
        "password": "exec123", 
        "role": UserRole.EXECUTOR
    },
    {
        "email": "executor3@company.com",
        "full_name": "–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤",
        "password": "exec123",
        "role": UserRole.EXECUTOR
    },
    {
        "email": "executor4@company.com",
        "full_name": "–ï–ª–µ–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞",
        "password": "exec123",
        "role": UserRole.EXECUTOR
    },
    {
        "email": "executor5@company.com",
        "full_name": "–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤",
        "password": "exec123",
        "role": UserRole.EXECUTOR
    }
]

CUSTOMER_DATA = [
    {
        "email": "customer1@gmail.com",
        "full_name": "–û–ª–µ–≥ –°–º–∏—Ä–Ω–æ–≤",
        "password": "customer123",
        "role": UserRole.CUSTOMER
    },
    {
        "email": "customer2@gmail.com",
        "full_name": "–ú–∞—Ä–∏—è –í–∞—Å–∏–ª—å–µ–≤–∞",
        "password": "customer123",
        "role": UserRole.CUSTOMER
    },
    {
        "email": "customer3@gmail.com", 
        "full_name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–æ–≤ikov",
        "password": "customer123",
        "role": UserRole.CUSTOMER
    },
    {
        "email": "customer4@gmail.com",
        "full_name": "–¢–∞—Ç—å—è–Ω–∞ –õ–µ–±–µ–¥–µ–≤–∞",
        "password": "customer123",
        "role": UserRole.CUSTOMER
    },
    {
        "email": "customer5@gmail.com",
        "full_name": "–°–µ—Ä–≥–µ–π –ö—É–∑–Ω–µ—Ü–æ–≤",
        "password": "customer123",
        "role": UserRole.CUSTOMER
    },
    {
        "email": "customer6@gmail.com",
        "full_name": "–ù–∞—Ç–∞–ª—å—è –§–µ–¥–æ—Ä–æ–≤–∞",
        "password": "customer123",
        "role": UserRole.CUSTOMER
    },
    {
        "email": "customer7@gmail.com",
        "full_name": "–í–ª–∞–¥–∏–º–∏—Ä –ú–µ–¥–≤–µ–¥–µ–≤",
        "password": "customer123",
        "role": UserRole.CUSTOMER
    },
    {
        "email": "customer8@gmail.com",
        "full_name": "–û–ª—å–≥–∞ –†–æ–º–∞–Ω–æ–≤–∞",
        "password": "customer123",
        "role": UserRole.CUSTOMER
    },
    {
        "email": "customer9@gmail.com",
        "full_name": "–ê–Ω–¥—Ä–µ–π –°–æ–∫–æ–ª–æ–≤",
        "password": "customer123",
        "role": UserRole.CUSTOMER
    },
    {
        "email": "customer10@gmail.com",
        "full_name": "–°–≤–µ—Ç–ª–∞–Ω–∞ –ü–æ–ø–æ–≤–∞",
        "password": "customer123",
        "role": UserRole.CUSTOMER
    }
]

# –®–∞–±–ª–æ–Ω—ã –∑–∞—è–≤–æ–∫
TICKET_TEMPLATES = [
    {
        "title": "–†–µ–º–æ–Ω—Ç –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥–∞",
        "description": "–¢–µ—á—å –≤ —Ç—Ä—É–±–µ –Ω–∞ –∫—É—Ö–Ω–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ",
        "addresses": ["—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 15, –∫–≤. 42", "–ø—Ä. –ú–∏—Ä–∞, –¥. 8, –∫–≤. 156", "—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 23, –∫–≤. 78"]
    },
    {
        "title": "–ó–∞–º–µ–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∏",
        "description": "–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–π –ø—Ä–æ–≤–æ–¥–∫–∏ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ",
        "addresses": ["—É–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞, –¥. 7, –∫–≤. 29", "—É–ª. –°–æ–≤–µ—Ç—Å–∫–∞—è, –¥. 45, –∫–≤. 12", "–ø—Ä. –°—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, –¥. 33, –∫–≤. 91"]
    },
    {
        "title": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞",
        "description": "–ú–æ–Ω—Ç–∞–∂ –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞ –≤ —Å–ø–∞–ª—å–Ω–µ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º", 
        "addresses": ["—É–ª. –°–∞–¥–æ–≤–∞—è, –¥. 19, –∫–≤. 67", "—É–ª. –ù–æ–≤–∞—è, –¥. 11, –∫–≤. 34", "–ø—Ä. –ü–æ–±–µ–¥—ã, –¥. 2, –∫–≤. 145"]
    },
    {
        "title": "–†–µ–º–æ–Ω—Ç –æ—Ç–æ–ø–ª–µ–Ω–∏—è",
        "description": "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–¥–∏–∞—Ç–æ—Ä –æ—Ç–æ–ø–ª–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ",
        "addresses": ["—É–ª. –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è, –¥. 6, –∫–≤. 23", "—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, –¥. 14, –∫–≤. 87", "–ø—Ä. –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤, –¥. 28, –∫–≤. 56"]
    },
    {
        "title": "–ó–∞–º–µ–Ω–∞ –∑–∞–º–∫–æ–≤",
        "description": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–º–∫–∞ –Ω–∞ –≤—Ö–æ–¥–Ω—É—é –¥–≤–µ—Ä—å",
        "addresses": ["—É–ª. –†–∞–±–æ—á–∞—è, –¥. 31, –∫–≤. 18", "—É–ª. –®–∫–æ–ª—å–Ω–∞—è, –¥. 9, –∫–≤. 72", "–ø—Ä. –õ–µ–Ω–∏–Ω—Å–∫–∏–π, –¥. 16, –∫–≤. 103"]
    },
    {
        "title": "–†–µ–º–æ–Ω—Ç —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏", 
        "description": "–ó–∞–º–µ–Ω–∞ —Å–º–µ—Å–∏—Ç–µ–ª—è –∏ —Ä–µ–º–æ–Ω—Ç –¥—É—à–µ–≤–æ–π –∫–∞–±–∏–Ω—ã",
        "addresses": ["—É–ª. –ü–∞—Ä–∫–æ–≤–∞—è, –¥. 22, –∫–≤. 45", "—É–ª. –†–µ—á–Ω–∞—è, –¥. 5, –∫–≤. 134", "–ø—Ä. –î—Ä—É–∂–±—ã, –¥. 12, –∫–≤. 67"]
    },
    {
        "title": "–ú–æ–Ω—Ç–∞–∂ –æ—Å–≤–µ—â–µ–Ω–∏—è",
        "description": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª—é—Å—Ç—Ä—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤",
        "addresses": ["—É–ª. –ó–µ–ª–µ–Ω–∞—è, –¥. 8, –∫–≤. 26", "—É–ª. –ú–∏—Ä–Ω–∞—è, –¥. 18, –∫–≤. 89", "–ø—Ä. –Æ–±–∏–ª–µ–π–Ω—ã–π, –¥. 4, –∫–≤. 112"]
    }
]


# ===== –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø –î–ê–ù–ù–´–• =====

async def create_users(session):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ—Ö —Ä–æ–ª–µ–π"""
    users = []
    
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–æ–≤
    for admin_data in ADMIN_DATA:
        user = User(
            email=admin_data["email"],
            full_name=admin_data["full_name"],
            role=admin_data["role"],
            hashed_password=get_password_hash(admin_data["password"]),
            is_active=True
        )
        session.add(user)
        users.append(user)
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    for executor_data in EXECUTOR_DATA:
        user = User(
            email=executor_data["email"],
            full_name=executor_data["full_name"],
            role=executor_data["role"],
            hashed_password=get_password_hash(executor_data["password"]),
            is_active=True
        )
        session.add(user)
        users.append(user)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    for customer_data in CUSTOMER_DATA:
        user = User(
            email=customer_data["email"],
            full_name=customer_data["full_name"],
            role=customer_data["role"],
            hashed_password=get_password_hash(customer_data["password"]),
            is_active=True
        )
        session.add(user)
        users.append(user)
    
    await session.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID
    for user in users:
        await session.refresh(user)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    print(f"   ‚Ä¢ {len(ADMIN_DATA)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    print(f"   ‚Ä¢ {len(EXECUTOR_DATA)} –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π")
    print(f"   ‚Ä¢ {len(CUSTOMER_DATA)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    return users


async def create_tickets(session, users):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏"""
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫...")
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
    admins = [u for u in users if u.role == UserRole.ADMIN]
    executors = [u for u in users if u.role == UserRole.EXECUTOR]
    customers = [u for u in users if u.role == UserRole.CUSTOMER]
    
    tickets = []
    
    # –°–æ–∑–¥–∞–µ–º 20 –∑–∞—è–≤–æ–∫
    for i in range(20):
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω
        template = random.choice(TICKET_TEMPLATES)
        address = random.choice(template["addresses"])
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        customer = random.choice(customers)
        
        # –°–ª—É—á–∞–π–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (70% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        executor = random.choice(executors) if random.random() < 0.7 else None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if executor is None:
            status = TicketStatus.PENDING
            started_at = None
            completed_at = None
        else:
            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
            status_options = [TicketStatus.IN_PROGRESS, TicketStatus.DONE, TicketStatus.REJECTED]
            weights = [0.4, 0.5, 0.1]  # 40% –≤ —Ä–∞–±–æ—Ç–µ, 50% –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, 10% –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
            status = random.choices(status_options, weights=weights)[0]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            created_days_ago = random.randint(1, 30)
            created_at = datetime.utcnow() - timedelta(days=created_days_ago)
            started_at = created_at + timedelta(hours=random.randint(1, 24))
            
            if status == TicketStatus.DONE:
                work_duration = random.randint(1, 72)  # 1-72 —á–∞—Å–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                completed_at = started_at + timedelta(hours=work_duration)
            else:
                completed_at = None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω
        deadline_days = random.randint(3, 14)
        if status == TicketStatus.DONE and completed_at:
            # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–µ–¥–ª–∞–π–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            deadline = created_at + timedelta(days=deadline_days)
        else:
            deadline = datetime.utcnow() + timedelta(days=deadline_days)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–±–æ–ª—å—à–µ –≤—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫)
        priority = random.choices([1, 2, 3, 4, 5], weights=[0.1, 0.2, 0.4, 0.2, 0.1])[0]
        
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö/–æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        completion_comment = None
        rejection_reason = None
        
        if status == TicketStatus.DONE:
            completion_comments = [
                "–†–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –≤ –ø–æ–ª–Ω–æ–º –æ–±—ä–µ–º–µ, –∑–∞–∫–∞–∑—á–∏–∫ –¥–æ–≤–æ–ª–µ–Ω",
                "–í—Å–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é",
                "–†–µ–º–æ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ, –≥–∞—Ä–∞–Ω—Ç–∏—è 6 –º–µ—Å—è—Ü–µ–≤",
                "–†–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–æ—Å—Ä–æ—á–Ω–æ, –∑–∞–∫–∞–∑—á–∏–∫ –ø—Ä–∏–Ω—è–ª —Ä–∞–±–æ—Ç—É",
                "–í—Å–µ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–≥–æ–≤–æ—Ä—É"
            ]
            completion_comment = random.choice(completion_comments)
        elif status == TicketStatus.REJECTED:
            rejection_reasons = [
                "–ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É",
                "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—ã –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º", 
                "–ó–∞–∫–∞–∑—á–∏–∫ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¥–æ—Å—Ç—É–ø –∫ –æ–±—ä–µ–∫—Ç—É",
                "–†–∞–±–æ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –∑–∞–∫–∞–∑—á–∏–∫–∞"
            ]
            rejection_reason = random.choice(rejection_reasons)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        ticket = Ticket(
            title=template["title"],
            address=address,
            description=template["description"],
            deadline=deadline,
            priority=priority,
            customer_id=customer.id,
            executor_id=executor.id if executor else None,
            status=status,
            created_at=created_at if 'created_at' in locals() else datetime.utcnow(),
            started_at=started_at,
            completed_at=completed_at,
            completion_comment=completion_comment,
            rejection_reason=rejection_reason
        )
        
        session.add(ticket)
        tickets.append(ticket)
    
    await session.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã
    for ticket in tickets:
        await session.refresh(ticket)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    status_counts = {}
    for status in TicketStatus:
        count = len([t for t in tickets if t.status == status])
        status_counts[status.value] = count
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(tickets)} –∑–∞—è–≤–æ–∫:")
    for status, count in status_counts.items():
        print(f"   ‚Ä¢ {status}: {count}")
    
    return tickets


async def create_sample_data():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üå± –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    await init_db()
    
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ –±–∞–∑–∞
        from sqlmodel import select
        existing_users = await session.exec(select(User))
        if existing_users.first():
            print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await create_users(session)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏
        tickets = await create_tickets(session, users)
        
        print(f"""
üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!

üìä –°–æ–∑–¥–∞–Ω–æ:
   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
   ‚Ä¢ –ó–∞—è–≤–æ–∫: {len(tickets)}

üîë –¢–µ—Å—Ç–æ–≤—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
   
   üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:
   ‚Ä¢ admin1@company.com / admin123
   ‚Ä¢ admin2@company.com / admin123  
   ‚Ä¢ admin3@company.com / admin123
   
   üîß –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:
   ‚Ä¢ executor1@company.com / exec123
   ‚Ä¢ executor2@company.com / exec123
   ‚Ä¢ executor3@company.com / exec123
   ‚Ä¢ executor4@company.com / exec123
   ‚Ä¢ executor5@company.com / exec123
   
   üë• –ö–ª–∏–µ–Ω—Ç—ã:
   ‚Ä¢ customer1@gmail.com / customer123
   ‚Ä¢ customer2@gmail.com / customer123
   ‚Ä¢ ... (–≤—Å–µ–≥–æ 10 –∫–ª–∏–µ–Ω—Ç–æ–≤)

üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!
        """)


# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ =====

async def clear_database():
    """–û—á–∏—â–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    print("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    async with async_session_maker() as session:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
        tickets_result = await session.exec(select(Ticket))
        tickets = tickets_result.all()
        for ticket in tickets:
            await session.delete(ticket)
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_result = await session.exec(select(User))
        users = users_result.all()
        for user in users:
            await session.delete(user)
        
        await session.commit()
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(tickets)} –∑–∞—è–≤–æ–∫ –∏ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


async def reset_database():
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    await clear_database()
    await create_sample_data()


# ===== –ó–ê–ü–£–°–ö =====

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        if command == "clear":
            asyncio.run(clear_database())
        elif command == "reset":
            asyncio.run(reset_database())
        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: clear, reset")
    else:
        asyncio.run(create_sample_data())