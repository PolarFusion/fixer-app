"""
–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç APScheduler –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤.
"""

import os
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from sqlmodel import select

from database import async_session_maker, cleanup_old_tickets
from models import Ticket


# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler: AsyncIOScheduler = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏
DEFAULT_RETENTION_DAYS = 90  # –î–Ω–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
CLEANUP_TIME = "02:00"       # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏ (2:00 –Ω–æ—á–∏)
MEDIA_DIR = "media"          # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤


# ===== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–ß–ò–°–¢–ö–ò =====

async def cleanup_old_data(retention_days: int = DEFAULT_RETENTION_DAYS) -> Dict:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –£–¥–∞–ª—è–µ—Ç –∑–∞—è–≤–∫–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π.
    """
    print(f"üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ä—à–µ {retention_days} –¥–Ω–µ–π...")
    
    cleanup_stats = {
        "started_at": datetime.utcnow().isoformat(),
        "tickets_deleted": 0,
        "files_deleted": 0,
        "errors": [],
        "status": "running"
    }
    
    try:
        # –û—á–∏—â–∞–µ–º –∑–∞—è–≤–∫–∏ (—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ database.py)
        deleted_tickets = await cleanup_old_tickets(retention_days)
        cleanup_stats["tickets_deleted"] = deleted_tickets
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã-—Å–∏—Ä–æ—Ç—ã
        orphaned_files = await cleanup_orphaned_files()
        cleanup_stats["files_deleted"] = orphaned_files
        
        cleanup_stats["status"] = "completed"
        print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_tickets} –∑–∞—è–≤–æ–∫ –∏ {orphaned_files} —Ñ–∞–π–ª–æ–≤")
        
    except Exception as e:
        cleanup_stats["status"] = "failed"
        cleanup_stats["errors"].append(str(e))
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
    
    cleanup_stats["completed_at"] = datetime.utcnow().isoformat()
    return cleanup_stats


async def cleanup_orphaned_files() -> int:
    """
    –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã-—Å–∏—Ä–æ—Ç—ã –≤ –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã –Ω–∏ —Å –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–æ–π.
    """
    if not os.path.exists(MEDIA_DIR):
        return 0
    
    deleted_count = 0
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    media_files = []
    for filename in os.listdir(MEDIA_DIR):
        file_path = os.path.join(MEDIA_DIR, filename)
        if os.path.isfile(file_path):
            media_files.append(file_path)
    
    if not media_files:
        return 0
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    async with async_session_maker() as session:
        tickets_query = select(Ticket.before_photo_path, Ticket.after_photo_path)
        result = await session.exec(tickets_query)
        ticket_files = result.all()
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –∑–∞—è–≤–∫–∞—Ö
    active_files = set()
    for before_path, after_path in ticket_files:
        if before_path:
            active_files.add(before_path)
        if after_path:
            active_files.add(after_path)
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã-—Å–∏—Ä–æ—Ç—ã
    for file_path in media_files:
        if file_path not in active_files:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                file_age = datetime.utcnow() - datetime.fromtimestamp(os.path.getmtime(file_path))
                if file_age > timedelta(days=1):
                    os.remove(file_path)
                    deleted_count += 1
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª-—Å–∏—Ä–æ—Ç–∞: {file_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    return deleted_count


async def cleanup_old_sessions() -> int:
    """
    –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –í –¥–∞–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è JWT, –ø–æ—ç—Ç–æ–º—É —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∞
    –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    """
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤, –∫–µ—à–∞ –∏ —Ç.–¥.
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    return 0


# ===== –ê–ù–ê–õ–ò–ó –î–ò–°–ö–û–í–û–ì–û –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê =====

async def analyze_disk_usage() -> Dict:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    analysis = {
        "media_dir_size_mb": 0,
        "media_files_count": 0,
        "database_size_mb": 0,
        "total_size_mb": 0,
        "analysis_date": datetime.utcnow().isoformat()
    }
    
    try:
        # –†–∞–∑–º–µ—Ä –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if os.path.exists(MEDIA_DIR):
            media_size = 0
            media_count = 0
            for root, dirs, files in os.walk(MEDIA_DIR):
                for file in files:
                    file_path = os.path.join(root, file)
                    if os.path.exists(file_path):
                        media_size += os.path.getsize(file_path)
                        media_count += 1
            
            analysis["media_dir_size_mb"] = round(media_size / (1024 * 1024), 2)
            analysis["media_files_count"] = media_count
        
        # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_files = ["tickets.db", "tickets.db-shm", "tickets.db-wal"]
        db_size = 0
        for db_file in db_files:
            if os.path.exists(db_file):
                db_size += os.path.getsize(db_file)
        
        analysis["database_size_mb"] = round(db_size / (1024 * 1024), 2)
        analysis["total_size_mb"] = analysis["media_dir_size_mb"] + analysis["database_size_mb"]
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞: {e}")
    
    return analysis


# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ò–°–¢–ö–ò =====

async def get_cleanup_candidates(days: int = DEFAULT_RETENTION_DAYS) -> Dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    –±–µ–∑ –∏—Ö —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.
    """
    cutoff_date = datetime.utcnow() - timedelta(days=days)
    
    candidates_info = {
        "cutoff_date": cutoff_date.isoformat(),
        "tickets_to_delete": 0,
        "files_to_delete": 0,
        "estimated_space_freed_mb": 0
    }
    
    try:
        async with async_session_maker() as session:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            old_tickets_query = select(Ticket).where(Ticket.created_at < cutoff_date)
            result = await session.exec(old_tickets_query)
            old_tickets = result.all()
            
            candidates_info["tickets_to_delete"] = len(old_tickets)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏ –∏—Ö —Ä–∞–∑–º–µ—Ä
            files_size = 0
            files_count = 0
            for ticket in old_tickets:
                for photo_path in [ticket.before_photo_path, ticket.after_photo_path]:
                    if photo_path and os.path.exists(photo_path):
                        try:
                            files_size += os.path.getsize(photo_path)
                            files_count += 1
                        except:
                            pass
            
            candidates_info["files_to_delete"] = files_count
            candidates_info["estimated_space_freed_mb"] = round(files_size / (1024 * 1024), 2)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {e}")
    
    return candidates_info


# ===== –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß =====

async def scheduled_cleanup():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ - –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"""
    print("üìÖ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏...")
    try:
        stats = await cleanup_old_data()
        print(f"‚úÖ –ü–ª–∞–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è: {e}")


async def weekly_analysis():
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    print("üìä –ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    try:
        analysis = await analyze_disk_usage()
        candidates = await get_cleanup_candidates()
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:")
        print(f"   –ú–µ–¥–∏–∞ —Ñ–∞–π–ª—ã: {analysis['media_files_count']} —Ñ–∞–π–ª–æ–≤, {analysis['media_dir_size_mb']} –ú–ë")
        print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {analysis['database_size_mb']} –ú–ë")
        print(f"   –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: {candidates['tickets_to_delete']} –∑–∞—è–≤–æ–∫")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")


def init_scheduler():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    global scheduler
    
    if scheduler is not None:
        return scheduler
    
    scheduler = AsyncIOScheduler()
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤ 2:00 –Ω–æ—á–∏
    scheduler.add_job(
        scheduled_cleanup,
        CronTrigger(hour=2, minute=0),
        id="daily_cleanup",
        name="–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö",
        replace_existing=True
    )
    
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º –≤ 3:00
    scheduler.add_job(
        weekly_analysis,
        CronTrigger(day_of_week=6, hour=3, minute=0),  # 6 = Sunday
        id="weekly_analysis",
        name="–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
        replace_existing=True
    )
    
    print("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return scheduler


def start_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    global scheduler
    
    if scheduler is None:
        scheduler = init_scheduler()
    
    if not scheduler.running:
        scheduler.start()
        print("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        for job in scheduler.get_jobs():
            print(f"   üìÖ {job.name}: {job.next_run_time}")
    else:
        print("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")


def stop_scheduler():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    global scheduler
    
    if scheduler and scheduler.running:
        scheduler.shutdown()
        print("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")


# ===== –£–ü–†–ê–í–õ–Ø–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò =====

async def force_cleanup(retention_days: int = DEFAULT_RETENTION_DAYS) -> Dict:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é)"""
    print(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (retention: {retention_days} –¥–Ω–µ–π)")
    return await cleanup_old_data(retention_days)


async def get_scheduler_status() -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global scheduler
    
    status = {
        "running": False,
        "jobs": [],
        "next_cleanup": None,
        "last_run": None
    }
    
    if scheduler:
        status["running"] = scheduler.running
        
        for job in scheduler.get_jobs():
            job_info = {
                "id": job.id,
                "name": job.name,
                "next_run": job.next_run_time.isoformat() if job.next_run_time else None
            }
            status["jobs"].append(job_info)
            
            if job.id == "daily_cleanup":
                status["next_cleanup"] = job.next_run_time.isoformat() if job.next_run_time else None
    
    return status


# ===== –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô =====

__all__ = [
    "cleanup_old_data",
    "cleanup_orphaned_files", 
    "analyze_disk_usage",
    "get_cleanup_candidates",
    "init_scheduler",
    "start_scheduler", 
    "stop_scheduler",
    "force_cleanup",
    "get_scheduler_status"
]