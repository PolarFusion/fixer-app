"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQLModel + SQLAlchemy –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º.
"""

import os
from typing import AsyncGenerator
from sqlmodel import SQLModel, create_engine, Session, select
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
import asyncio


# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–î =====

DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./tickets.db")
ASYNC_DATABASE_URL = DATABASE_URL.replace("sqlite://", "sqlite+aiosqlite://")

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–æ–≤ –ë–î
engine = create_engine(DATABASE_URL, echo=False, connect_args={"check_same_thread": False})
async_engine = create_async_engine(ASYNC_DATABASE_URL, echo=False)

# –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
async_session_maker = sessionmaker(
    async_engine, class_=AsyncSession, expire_on_commit=False
)


# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î =====

def create_db_and_tables():
    """
    –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    from models import User, Ticket  # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
    
    SQLModel.metadata.create_all(engine)
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")


async def init_db():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
    """
    from models import User, Ticket
    
    async with async_engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)
    
    print("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


# ===== –°–ï–°–°–ò–ò –ë–î =====

async def get_session() -> AsyncGenerator[AsyncSession, None]:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ dependency –≤ FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö.
    """
    async with async_session_maker() as session:
        try:
            yield session
            await session.commit()
        except Exception:
            await session.rollback()
            raise
        finally:
            await session.close()


def get_sync_session() -> Session:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–¥–∞—á –∏ seed.py
    """
    return Session(engine)


# ===== –£–¢–ò–õ–ò–¢–´ –ë–î =====

async def get_user_by_email(session: AsyncSession, email: str):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
    from models import User
    
    result = await session.exec(select(User).where(User.email == email))
    return result.first()


async def get_user_by_id(session: AsyncSession, user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    from models import User
    
    result = await session.exec(select(User).where(User.id == user_id))
    return result.first()


async def get_ticket_by_id(session: AsyncSession, ticket_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É –ø–æ ID —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    from models import Ticket, User
    from sqlalchemy.orm import selectinload
    
    query = select(Ticket).options(
        selectinload(Ticket.customer),
        selectinload(Ticket.executor)
    ).where(Ticket.id == ticket_id)
    
    result = await session.exec(query)
    return result.first()


async def get_tickets_for_user(session: AsyncSession, user_id: int, role: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
    from models import Ticket, User, UserRole
    from sqlalchemy.orm import selectinload
    
    query = select(Ticket).options(
        selectinload(Ticket.customer),
        selectinload(Ticket.executor)
    )
    
    if role == UserRole.CUSTOMER:
        # –ö–ª–∏–µ–Ω—Ç –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏
        query = query.where(Ticket.customer_id == user_id)
    elif role == UserRole.EXECUTOR:
        # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–∏–¥–∏—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –µ–º—É –∑–∞—è–≤–∫–∏
        query = query.where(Ticket.executor_id == user_id)
    # ADMIN –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ (–±–µ–∑ –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)
    
    result = await session.exec(query.order_by(Ticket.created_at.desc()))
    return result.all()


async def get_executors(session: AsyncSession):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
    from models import User, UserRole
    
    result = await session.exec(
        select(User).where(
            User.role == UserRole.EXECUTOR,
            User.is_active == True
        )
    )
    return result.all()


# ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====

async def get_ticket_stats(session: AsyncSession):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—è–≤–∫–∞–º"""
    from models import Ticket, TicketStatus
    from sqlalchemy import func, select as sql_select
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    total_query = select(func.count(Ticket.id))
    pending_query = select(func.count(Ticket.id)).where(Ticket.status == TicketStatus.PENDING)
    in_progress_query = select(func.count(Ticket.id)).where(Ticket.status == TicketStatus.IN_PROGRESS)
    done_query = select(func.count(Ticket.id)).where(Ticket.status == TicketStatus.DONE)
    rejected_query = select(func.count(Ticket.id)).where(Ticket.status == TicketStatus.REJECTED)
    
    total = (await session.exec(total_query)).first() or 0
    pending = (await session.exec(pending_query)).first() or 0
    in_progress = (await session.exec(in_progress_query)).first() or 0
    done = (await session.exec(done_query)).first() or 0
    rejected = (await session.exec(rejected_query)).first() or 0
    
    # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —á–∞—Å–∞—Ö)
    avg_time = None
    if done > 0:
        avg_query = select(
            func.avg(
                func.julianday(Ticket.completed_at) - func.julianday(Ticket.started_at)
            ) * 24  # –ü–µ—Ä–µ–≤–æ–¥ –≤ —á–∞—Å—ã
        ).where(
            Ticket.status == TicketStatus.DONE,
            Ticket.started_at.isnot(None),
            Ticket.completed_at.isnot(None)
        )
        avg_time = (await session.exec(avg_query)).first()
    
    return {
        "total_tickets": total,
        "pending_tickets": pending, 
        "in_progress_tickets": in_progress,
        "done_tickets": done,
        "rejected_tickets": rejected,
        "avg_completion_time_hours": round(avg_time, 2) if avg_time else None
    }


# ===== –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• =====

async def cleanup_old_tickets(days: int = 90):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞—è–≤–∫–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–¥–∞—á.
    """
    from datetime import datetime, timedelta
    from models import Ticket
    import os
    import asyncio
    
    cutoff_date = datetime.utcnow() - timedelta(days=days)
    
    async with async_session_maker() as session:
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞—è–≤–∫–∏
        old_tickets_query = select(Ticket).where(Ticket.created_at < cutoff_date)
        result = await session.exec(old_tickets_query)
        old_tickets = result.all()
        
        deleted_count = 0
        for ticket in old_tickets:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for photo_path in [ticket.before_photo_path, ticket.after_photo_path]:
                if photo_path and os.path.exists(photo_path):
                    try:
                        os.remove(photo_path)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {photo_path}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {photo_path}: {e}")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
            await session.delete(ticket)
            deleted_count += 1
        
        await session.commit()
        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞—è–≤–æ–∫ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π")
        return deleted_count


# ===== –¢–ï–°–¢–û–í–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï =====

async def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with async_session_maker() as session:
            result = await session.exec(select(1))
            assert result.first() == 1
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    asyncio.run(test_connection())