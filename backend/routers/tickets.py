"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫, –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ.
"""

import os
import uuid
from datetime import datetime
from typing import Annotated, List, Optional
from fastapi import APIRouter, Depends, HTTPException, status, File, UploadFile, Form, WebSocket, WebSocketDisconnect
from fastapi.responses import FileResponse
from sqlalchemy.ext.asyncio import AsyncSession
from sqlmodel import select
import aiofiles
import json

from database import get_session, get_ticket_by_id, get_tickets_for_user, get_executors, get_ticket_stats
from models import (
    Ticket, TicketCreate, TicketUpdate, TicketPublic, TicketStatus, 
    User, UserRole, DashboardData, TicketStats, WSMessage
)
from routers.auth import get_current_active_user, check_admin_role

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====

router = APIRouter(prefix="/api/tickets", tags=["tickets"])

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
MEDIA_DIR = "media"
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
ALLOWED_EXTENSIONS = {".jpg", ".jpeg", ".png", ".webp"}

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
os.makedirs(MEDIA_DIR, exist_ok=True)

# ===== WEBSOCKET –ú–ï–ù–ï–î–ñ–ï–† =====

class ConnectionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è realtime —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.active_connections: dict[int, WebSocket] = {}  # user_id -> websocket
    
    async def connect(self, websocket: WebSocket, user_id: int):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ WebSocket"""
        await websocket.accept()
        self.active_connections[user_id] = websocket
        print(f"üì° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ WebSocket")
    
    def disconnect(self, user_id: int):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç WebSocket"""
        if user_id in self.active_connections:
            del self.active_connections[user_id]
            print(f"üì° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç WebSocket")
    
    async def send_personal_message(self, message: dict, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if user_id in self.active_connections:
            try:
                await self.active_connections[user_id].send_text(json.dumps(message, default=str))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                self.disconnect(user_id)
    
    async def broadcast(self, message: dict, exclude_user_id: Optional[int] = None):
        """–†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        for user_id, connection in list(self.active_connections.items()):
            if exclude_user_id and user_id == exclude_user_id:
                continue
            try:
                await connection.send_text(json.dumps(message, default=str))
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                self.disconnect(user_id)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
manager = ConnectionManager()


# ===== –£–¢–ò–õ–ò–¢–´ =====

def validate_file(file: UploadFile) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if not file.filename:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
    file_ext = os.path.splitext(file.filename)[1].lower()
    if file_ext not in ALLOWED_EXTENSIONS:
        return False
    
    return True


async def save_uploaded_file(file: UploadFile, prefix: str = "") -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å"""
    if not validate_file(file):
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    file_ext = os.path.splitext(file.filename)[1].lower()
    unique_filename = f"{prefix}{uuid.uuid4()}{file_ext}"
    file_path = os.path.join(MEDIA_DIR, unique_filename)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    async with aiofiles.open(file_path, 'wb') as f:
        content = await file.read()
        if len(content) > MAX_FILE_SIZE:
            raise HTTPException(status_code=400, detail="–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
        await f.write(content)
    
    return file_path


async def notify_ticket_update(ticket: Ticket, action: str, session: AsyncSession):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    full_ticket = await get_ticket_by_id(session, ticket.id)
    if not full_ticket:
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = {
        "type": "ticket_updated",
        "action": action,  # "created", "assigned", "status_changed", etc.
        "ticket": {
            "id": full_ticket.id,
            "title": full_ticket.title,
            "status": full_ticket.status,
            "customer_name": full_ticket.customer.full_name if full_ticket.customer else None,
            "executor_name": full_ticket.executor.full_name if full_ticket.executor else None
        },
        "timestamp": datetime.utcnow().isoformat()
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–º —Å—Ç–æ—Ä–æ–Ω–∞–º
    recipients = []
    
    if full_ticket.customer_id:
        recipients.append(full_ticket.customer_id)
    if full_ticket.executor_id:
        recipients.append(full_ticket.executor_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id in recipients:
        await manager.send_personal_message(message, user_id)
    
    # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
    # TODO: –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–ª—É—á–∏–≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ë–î
    await manager.broadcast(message)


# ===== WEBSOCKET –≠–ù–î–ü–û–ò–ù–¢–´ =====

@router.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: int):
    """WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è realtime —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await manager.connect(websocket, user_id)
    try:
        while True:
            # –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–ø–∏–Ω–≥/–ø–æ–Ω–≥)
            data = await websocket.receive_text()
            if data == "ping":
                await websocket.send_text("pong")
    except WebSocketDisconnect:
        manager.disconnect(user_id)


# ===== –û–°–ù–û–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ =====

@router.post("/", response_model=TicketPublic)
async def create_ticket(
    title: str = Form(...),
    address: str = Form(...),
    description: str = Form(...),
    deadline: str = Form(...),  # ISO datetime string
    priority: int = Form(1),
    executor_id: Optional[int] = Form(None),
    current_user: Annotated[User, Depends(get_current_active_user)] = Depends(),
    session: AsyncSession = Depends(get_session)
):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏.
    –ö–ª–∏–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏, –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å—Ä–∞–∑—É –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫
    if current_user.role not in [UserRole.CUSTOMER, UserRole.ADMIN]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫"
        )
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    try:
        deadline_dt = datetime.fromisoformat(deadline.replace('Z', '+00:00'))
    except ValueError:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
    if executor_id:
        if current_user.role != UserRole.ADMIN:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"
            )
        
        executor = await session.get(User, executor_id)
        if not executor or executor.role != UserRole.EXECUTOR:
            raise HTTPException(status_code=400, detail="–£–∫–∞–∑–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    ticket = Ticket(
        title=title,
        address=address,
        description=description,
        deadline=deadline_dt,
        priority=priority,
        customer_id=current_user.id,
        executor_id=executor_id,
        status=TicketStatus.IN_PROGRESS if executor_id else TicketStatus.PENDING,
        started_at=datetime.utcnow() if executor_id else None
    )
    
    session.add(ticket)
    await session.commit()
    await session.refresh(ticket)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    full_ticket = await get_ticket_by_id(session, ticket.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await notify_ticket_update(ticket, "created", session)
    
    return full_ticket


@router.get("/", response_model=List[TicketPublic])
async def get_tickets(
    status: Optional[TicketStatus] = None,
    executor_id: Optional[int] = None,
    limit: int = 50,
    offset: int = 0,
    current_user: Annotated[User, Depends(get_current_active_user)] = Depends(),
    session: AsyncSession = Depends(get_session)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π.
    –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    tickets = await get_tickets_for_user(session, current_user.id, current_user.role)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if status:
        tickets = [t for t in tickets if t.status == status]
    
    if executor_id:
        tickets = [t for t in tickets if t.executor_id == executor_id]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    tickets = tickets[offset:offset + limit]
    
    return tickets


@router.get("/{ticket_id}", response_model=TicketPublic)
async def get_ticket(
    ticket_id: int,
    current_user: Annotated[User, Depends(get_current_active_user)] = Depends(),
    session: AsyncSession = Depends(get_session)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–µ"""
    ticket = await get_ticket_by_id(session, ticket_id)
    if not ticket:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if current_user.role == UserRole.CUSTOMER and ticket.customer_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ")
    elif current_user.role == UserRole.EXECUTOR and ticket.executor_id != current_user.id:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ")
    
    return ticket


@router.put("/{ticket_id}", response_model=TicketPublic)
async def update_ticket(
    ticket_id: int,
    status: Optional[TicketStatus] = Form(None),
    executor_id: Optional[int] = Form(None),
    completion_comment: Optional[str] = Form(None),
    rejection_reason: Optional[str] = Form(None),
    before_photo: Optional[UploadFile] = File(None),
    after_photo: Optional[UploadFile] = File(None),
    current_user: Annotated[User, Depends(get_current_active_user)] = Depends(),
    session: AsyncSession = Depends(get_session)
):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏.
    –†–∞–∑–Ω—ã–µ —Ä–æ–ª–∏ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π.
    """
    ticket = await get_ticket_by_id(session, ticket_id)
    if not ticket:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    can_edit = False
    if current_user.role == UserRole.ADMIN:
        can_edit = True
    elif current_user.role == UserRole.EXECUTOR and ticket.executor_id == current_user.id:
        can_edit = True
    elif current_user.role == UserRole.CUSTOMER and ticket.customer_id == current_user.id:
        # –ö–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ PENDING
        can_edit = ticket.status == TicketStatus.PENDING
    
    if not can_edit:
        raise HTTPException(status_code=403, detail="–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∑–∞—è–≤–∫–∏")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    updates_made = []
    
    if status is not None:
        old_status = ticket.status
        ticket.status = status
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        if status == TicketStatus.IN_PROGRESS and old_status == TicketStatus.PENDING:
            ticket.started_at = datetime.utcnow()
        elif status == TicketStatus.DONE:
            ticket.completed_at = datetime.utcnow()
            # –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            if not completion_comment:
                raise HTTPException(
                    status_code=400, 
                    detail="–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
                )
        elif status == TicketStatus.REJECTED:
            # –î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏—á–∏–Ω–∞
            if not rejection_reason:
                raise HTTPException(
                    status_code=400,
                    detail="–î–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É"
                )
        
        updates_made.append(f"—Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å {old_status} –Ω–∞ {status}")
    
    if executor_id is not None and current_user.role == UserRole.ADMIN:
        ticket.executor_id = executor_id
        if executor_id and ticket.status == TicketStatus.PENDING:
            ticket.status = TicketStatus.IN_PROGRESS
            ticket.started_at = datetime.utcnow()
        updates_made.append("–Ω–∞–∑–Ω–∞—á–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
    
    if completion_comment is not None:
        ticket.completion_comment = completion_comment
        updates_made.append("–¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
    
    if rejection_reason is not None:
        ticket.rejection_reason = rejection_reason
        updates_made.append("—É–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ
    if before_photo and before_photo.filename:
        file_path = await save_uploaded_file(before_photo, "before_")
        ticket.before_photo_path = file_path
        updates_made.append("–∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ '–¥–æ'")
    
    if after_photo and after_photo.filename:
        file_path = await save_uploaded_file(after_photo, "after_")
        ticket.after_photo_path = file_path
        updates_made.append("–∑–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ '–ø–æ—Å–ª–µ'")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    session.add(ticket)
    await session.commit()
    await session.refresh(ticket)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    updated_ticket = await get_ticket_by_id(session, ticket_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    action = "status_changed" if status else "updated"
    await notify_ticket_update(ticket, action, session)
    
    return updated_ticket


@router.delete("/{ticket_id}")
async def delete_ticket(
    ticket_id: int,
    current_user: Annotated[User, Depends(check_admin_role)] = Depends(),
    session: AsyncSession = Depends(get_session)
):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    ticket = await get_ticket_by_id(session, ticket_id)
    if not ticket:
        raise HTTPException(status_code=404, detail="–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for photo_path in [ticket.before_photo_path, ticket.after_photo_path]:
        if photo_path and os.path.exists(photo_path):
            try:
                os.remove(photo_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {photo_path}: {e}")
    
    await session.delete(ticket)
    await session.commit()
    
    return {"message": "–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞"}


# ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ =====

@router.get("/executors/list", response_model=List[dict])
async def get_executors_list(
    current_user: Annotated[User, Depends(get_current_active_user)] = Depends(),
    session: AsyncSession = Depends(get_session)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    executors = await get_executors(session)
    return [
        {"id": executor.id, "full_name": executor.full_name, "email": executor.email}
        for executor in executors
    ]


@router.get("/media/{filename}")
async def get_media_file(filename: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞"""
    file_path = os.path.join(MEDIA_DIR, filename)
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return FileResponse(file_path)


@router.get("/dashboard/data", response_model=DashboardData)
async def get_dashboard_data(
    current_user: Annotated[User, Depends(get_current_active_user)] = Depends(),
    session: AsyncSession = Depends(get_session)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_data = await get_ticket_stats(session)
    stats = TicketStats(**stats_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏
    all_tickets = await get_tickets_for_user(session, current_user.id, current_user.role)
    recent_tickets = all_tickets[:10]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω—ã–µ –∑–∞—è–≤–∫–∏ (–¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤)
    my_tickets = None
    if current_user.role in [UserRole.EXECUTOR, UserRole.CUSTOMER]:
        my_tickets = [t for t in all_tickets if 
                     (current_user.role == UserRole.EXECUTOR and t.executor_id == current_user.id) or
                     (current_user.role == UserRole.CUSTOMER and t.customer_id == current_user.id)][:5]
    
    return DashboardData(
        stats=stats,
        recent_tickets=recent_tickets,
        my_tickets=my_tickets
    )