"""
–û—Å–Ω–æ–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–º–æ–Ω—Ç–Ω–æ-–º–æ–Ω—Ç–∞–∂–Ω—ã—Ö –∑–∞—è–≤–æ–∫.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é, CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏, WebSocket, –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
"""

import os
import uvicorn
from contextlib import asynccontextmanager
from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from database import init_db, get_session
from routers import auth, tickets, reports
from services.cleanup import start_scheduler, stop_scheduler, get_scheduler_status
from services.stats import get_comprehensive_analytics


# ===== LIFESPAN –ú–ï–ù–ï–î–ñ–ï–† =====

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ,
    –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await init_db()
    start_scheduler()
    
    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    yield  # –ó–¥–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    print("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    stop_scheduler()
    print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


# ===== –°–û–ó–î–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

app = FastAPI(
    title="–°–∏—Å—Ç–µ–º–∞ —Ä–µ–º–æ–Ω—Ç–Ω–æ-–º–æ–Ω—Ç–∞–∂–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç–Ω–æ-–º–æ–Ω—Ç–∞–∂–Ω—ã–µ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ–ª–µ–π, —Ñ–∞–π–ª–æ–≤ –∏ –æ—Ç—á–µ—Ç–æ–≤",
    version="1.0.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc",
    lifespan=lifespan
)


# ===== –ù–ê–°–¢–†–û–ô–ö–ê CORS =====

app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",  # React dev server
        "http://localhost:5173",  # Vite dev server
        "http://127.0.0.1:3000",
        "http://127.0.0.1:5173",
        "http://frontend:3000",   # Docker frontend
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ===== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –†–û–£–¢–ï–†–û–í =====

# –†–æ—É—Ç–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.include_router(auth.router)

# –†–æ—É—Ç–µ—Ä –∑–∞—è–≤–æ–∫ (–≤–∫–ª—é—á–∞–µ—Ç WebSocket)
app.include_router(tickets.router)

# –†–æ—É—Ç–µ—Ä –æ—Ç—á–µ—Ç–æ–≤
app.include_router(reports.router)


# ===== –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ =====

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–µ–¥–∏–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
app.mount("/media", StaticFiles(directory="media"), name="media")


# ===== –û–°–ù–û–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ =====

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    return {
        "name": "–°–∏—Å—Ç–µ–º–∞ —Ä–µ–º–æ–Ω—Ç–Ω–æ-–º–æ–Ω—Ç–∞–∂–Ω—ã—Ö –∑–∞—è–≤–æ–∫",
        "version": "1.0.0",
        "description": "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–æ–ª–µ–π –∏ –æ—Ç—á–µ—Ç–æ–≤",
        "docs": "/api/docs",
        "health": "/api/health"
    }


@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    scheduler_status = await get_scheduler_status()
    
    return {
        "status": "healthy",
        "timestamp": "2024-01-01T00:00:00Z",  # Placeholder
        "services": {
            "database": "connected",
            "scheduler": "running" if scheduler_status["running"] else "stopped",
            "media_dir": "available" if os.path.exists("media") else "missing"
        },
        "scheduler": scheduler_status
    }


@app.get("/api/info")
async def app_info():
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    return {
        "application": {
            "name": "Repair Management System",
            "version": "1.0.0",
            "environment": os.getenv("ENVIRONMENT", "development")
        },
        "features": [
            "JWT Authentication",
            "Role-based Access Control",
            "File Upload Support", 
            "Real-time WebSocket Notifications",
            "PDF/XLSX Report Generation",
            "Automated Data Cleanup",
            "Statistics and Analytics"
        ],
        "supported_roles": ["admin", "executor", "customer"],
        "supported_formats": ["PDF", "XLSX"],
        "api_endpoints": {
            "authentication": "/api/auth/*",
            "tickets": "/api/tickets/*", 
            "reports": "/api/reports/*",
            "websocket": "/api/tickets/ws/{user_id}"
        }
    }


# ===== –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ =====

@app.get("/api/admin/stats")
async def get_admin_analytics(
    session=Depends(get_session),
    current_user=Depends(auth.check_admin_role)
):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
    –í–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Ç—Ä–µ–Ω–¥—ã, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.
    """
    analytics = await get_comprehensive_analytics(session)
    return analytics


@app.get("/api/admin/scheduler")
async def get_scheduler_info(current_user=Depends(auth.check_admin_role)):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –∑–∞–¥–∞—á"""
    return await get_scheduler_status()


@app.post("/api/admin/cleanup")
async def manual_cleanup(
    retention_days: int = 90,
    current_user=Depends(auth.check_admin_role)
):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    from services.cleanup import force_cleanup
    
    result = await force_cleanup(retention_days)
    return result


@app.get("/api/admin/disk-usage")
async def get_disk_usage(current_user=Depends(auth.check_admin_role)):
    """–ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞"""
    from services.cleanup import analyze_disk_usage, get_cleanup_candidates
    
    usage = await analyze_disk_usage()
    candidates = await get_cleanup_candidates()
    
    return {
        "current_usage": usage,
        "cleanup_candidates": candidates
    }


# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö =====

@app.exception_handler(404)
async def not_found_handler(request, exc):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 404 –æ—à–∏–±–∫–∏"""
    return JSONResponse(
        status_code=404,
        content={
            "error": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
            "message": "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "path": str(request.url.path)
        }
    )


@app.exception_handler(500)
async def internal_error_handler(request, exc):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 500 –æ—à–∏–±–∫–∏"""
    return JSONResponse(
        status_code=500,
        content={
            "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }
    )


# ===== MIDDLEWARE =====

@app.middleware("http")
async def add_security_headers(request, call_next):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    response = await call_next(request)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    
    return response


@app.middleware("http") 
async def log_requests(request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)"""
    import time
    
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    
    print(f"üìù {request.method} {request.url.path} - {response.status_code} - {process_time:.3f}s")
    
    return response


# ===== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

if __name__ == "__main__":
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,  # –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        log_level="info"
    )